{"diagram":{"image":{"height":200,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","width":200,"y":0,"x":0},"elements":{"id":"root","title":"C++基础","leftChildren":[],"structure":"mind_right","root":true,"theme":"black","children":[{"id":"aee258d9e91c","title":"基本语法","children":[{"id":"c95a352adc7b","title":"注释","children":[{"id":"3f6b34064b1f","title":"行注释","parent":"c95a352adc7b","children":[]},{"id":"393300cd2afb","title":"块注释","children":[],"parent":"c95a352adc7b"}],"parent":"aee258d9e91c","collapsed":false},{"id":"b82d4c81cddf","title":"预处理器指令","children":[],"parent":"aee258d9e91c"},{"id":"06c11d2842d7","title":"namespace","parent":"aee258d9e91c","children":[{"id":"3013e43ac903","title":"命名空间是 C++ 中一个相对新的概念","children":[],"parent":"06c11d2842d7","note":"命名空间是ANSI C++引入的可以由用户命名的作用域，用来处理程序中常见的同名冲突。\n在c++中有4层次的作用域：文件、函数、类、复合语句。在不同的作用域中可以定义名字相同的变量，互不干扰，便于系统区别他们。"}],"collapsed":false},{"id":"7144f60552f6","title":"主函数","parent":"aee258d9e91c","children":[]},{"id":"7bbd338091b3","title":"分号 &amp; 语句块","parent":"aee258d9e91c","children":[],"collapsed":false},{"id":"22dcd3d9fb41","title":"标识符<br>","children":[{"id":"ad676806e13b","title":"一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）","children":[],"parent":"22dcd3d9fb41"},{"id":"b25df026b012","title":"区分大小写","parent":"22dcd3d9fb41","children":[]}],"parent":"aee258d9e91c","collapsed":false},{"id":"082945fa0089","title":"关键字","children":[],"parent":"aee258d9e91c","note":"| asm          | else      | new              | this     |\n| ------------ | --------- | ---------------- | -------- |\n| auto         | enum      | operator         | throw    |\n| bool         | explicit  | private          | true     |\n| break        | export    | protected        | try      |\n| case         | extern    | public           | typedef  |\n| catch        | false     | register         | typeid   |\n| char         | float     | reinterpret_cast | typename |\n| class        | for       | return           | union    |\n| const        | friend    | short            | unsigned |\n| const_cast   | goto      | signed           | using    |\n| continue     | if        | sizeof           | virtual  |\n| default      | inline    | static           | void     |\n| delete       | int       | static_cast      | volatile |\n| do           | long      | struct           | wchar_t  |\n| double       | mutable   | switch           | while    |\n| dynamic_cast | namespace | template         |          |"},{"id":"09b389c33a35","title":"三字符组<br>","children":[{"id":"22dec2c74a33","title":"所有的编译器都不支持三字符组，为避免造成混乱，不建议使用三字符组。","children":[],"parent":"09b389c33a35"}],"parent":"aee258d9e91c","collapsed":false},{"id":"cd7766e10895","title":"空格<br>","parent":"aee258d9e91c","children":[]},{"id":"f3f4217b2a6a","title":"数据类型","children":[{"id":"4a4562b1a3e8","title":"七种基本数据类型<br>","children":[],"parent":"f3f4217b2a6a","note":"| 类型     | 关键字  |\n| :------- | :------ |\n| 布尔型   | bool    |\n| 字符型   | char    |\n| 整型     | int     |\n| 浮点型   | float   |\n| 双浮点型 | double  |\n| 无类型   | void    |\n| 宽字符型 | wchar_t |"},{"id":"06ff77b85841","title":"typedef 声明","children":[{"id":"078b77ec4bed","title":"typedef 为一个已有的类型取一个新的名字","children":[],"parent":"06ff77b85841"}],"parent":"f3f4217b2a6a"},{"id":"d12e003c0ff9","title":"枚举类型","parent":"f3f4217b2a6a","children":[{"id":"aa59d636ebc1","title":"关键字enum<br>","parent":"d12e003c0ff9","children":[]},{"id":"9e2b6d27a5da","title":"初始值","parent":"d12e003c0ff9","children":[]}]}],"parent":"aee258d9e91c","collapsed":false},{"id":"19d8ebc84342","title":"变量类型","parent":"aee258d9e91c","children":[{"id":"1bebface27cd","title":"基本变量类型","children":[{"id":"1b722dcaf4f1","title":"定义<br>","parent":"1bebface27cd","children":[]},{"id":"cdd4716c4f6d","title":"声明","children":[{"id":"d1fc326abcb8","title":"关键字extern<br>","parent":"cdd4716c4f6d","children":[]}],"parent":"1bebface27cd"},{"id":"bf4ef0b9959d","title":"左值和右值","parent":"1bebface27cd","children":[{"id":"6410ff16dd7a","title":"左值（lvalue）：指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边","children":[],"parent":"bf4ef0b9959d"},{"id":"cec6fee4c687","title":"右值（rvalue）：术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边<br>","children":[],"parent":"bf4ef0b9959d"}]}],"parent":"19d8ebc84342","note":"| 类型    | 描述                                                         |\n| :------ | :----------------------------------------------------------- |\n| bool    | 存储值 true 或 false。                                       |\n| char    | 通常是一个字符（八位）。这是一个整数类型。                   |\n| int     | 对机器而言，整数的最自然的大小。                             |\n| float   | 单精度浮点值。单精度是这样的格式，1位符号，8位指数，23位小数。![img](https://www.runoob.com/wp-content/uploads/2014/09/v2-749cc641eb4d5dafd085e8c23f8826aa_hd.png) |\n| double  | 双精度浮点值。双精度是1位符号，11位指数，52位小数。![img](https://www.runoob.com/wp-content/uploads/2014/09/v2-48240f0e1e0dd33ec89100cbe2d30707_hd.png) |\n| void    | 表示类型的缺失。                                             |\n| wchar_t |                                                              |"},{"id":"01c574fe7c1c","title":"枚举、指针、数组、引用、数据结构、类","parent":"19d8ebc84342","children":[]}],"collapsed":false},{"id":"986ebef18a68","title":"变量作用域","parent":"aee258d9e91c","children":[{"id":"ca50ce381f86","title":"局部变量<br>","parent":"986ebef18a68","children":[]},{"id":"f3ae542642b5","title":"全局变量","children":[],"parent":"986ebef18a68"},{"id":"bd26cd628896","title":"形式参数","parent":"986ebef18a68","children":[]}],"collapsed":false},{"id":"3af32460e2f3","title":"常量","children":[{"id":"501f1989287c","title":"类型","children":[{"id":"f886f972d475","title":"整数常量<br>","parent":"501f1989287c","children":[]},{"id":"89d917009e06","title":"浮点常量","parent":"501f1989287c","children":[]},{"id":"53c387cc78bb","title":"布尔常量","parent":"501f1989287c","children":[]},{"id":"066a70390c0f","title":"字符常量","parent":"501f1989287c","children":[]},{"id":"3a872ae19736","title":"字符串常量","parent":"501f1989287c","children":[]}],"parent":"3af32460e2f3"},{"id":"6b2257dfa960","title":"定义","children":[{"id":"dbd5e64ac789","title":"使用 #define 预处理器","children":[],"parent":"6b2257dfa960","note":"#define identifier value"},{"id":"69448672e806","title":"使用const 关键字<br>","parent":"6b2257dfa960","children":[],"note":"const type variable = value;"}],"parent":"3af32460e2f3"}],"parent":"aee258d9e91c","collapsed":false},{"id":"9f9b04d8186b","title":"修饰符","children":[],"parent":"aee258d9e91c","note":"signed\nunsigned\nlong\nshort"},{"id":"ae18cc022574","title":"存储类","parent":"aee258d9e91c","children":[],"note":"auto\nregister\nstatic\nextern\nmutable\nthread_local (C++11)"},{"id":"c14c769ad4ba","title":"运算符","parent":"aee258d9e91c","children":[],"note":"算术运算符\n关系运算符\n逻辑运算符\n位运算符\n赋值运算符\n杂项运算符"},{"id":"90a44c2a5e81","title":"循环","children":[{"id":"b25b4c51544e","title":"循环类型","children":[{"id":"c87ecfc7a82a","title":"for","parent":"b25b4c51544e","children":[]},{"id":"001060f08d0a","title":"while<br>","parent":"b25b4c51544e","children":[]},{"id":"656029cacd2d","title":"do...while","children":[],"parent":"b25b4c51544e"},{"id":"3c32202ff512","title":"嵌套","children":[],"parent":"b25b4c51544e"}],"parent":"90a44c2a5e81"},{"id":"96e5c8bf4076","title":"循环控制","parent":"90a44c2a5e81","children":[{"id":"344a56873827","title":"continue<br>","children":[],"parent":"96e5c8bf4076"},{"id":"91688e7bf41e","title":"break","children":[],"parent":"96e5c8bf4076"},{"id":"b10fc8c95ffe","title":"goto","parent":"96e5c8bf4076","children":[]}]},{"id":"5bcf2f0441e1","title":"无限循环","parent":"90a44c2a5e81","children":[{"id":"d9e8014f41f9","title":"for( ; ; )<br>","parent":"5bcf2f0441e1","children":[]}]}],"parent":"aee258d9e91c"},{"id":"4df665aaad98","title":"判断<br>","children":[{"id":"71a8954b6e23","title":"判断语句","parent":"4df665aaad98","children":[],"note":"\n\n| 语句                                                         | 描述                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [if 语句](https://www.runoob.com/cplusplus/cpp-if.html)      | 一个 **if 语句** 由一个布尔表达式后跟一个或多个语句组成。    |\n| [if...else 语句](https://www.runoob.com/cplusplus/cpp-if-else.html) | 一个 **if 语句** 后可跟一个可选的 **else 语句**，else 语句在布尔表达式为假时执行。 |\n| [嵌套 if 语句](https://www.runoob.com/cplusplus/cpp-nested-if.html) | 您可以在一个 **if** 或 **else if** 语句内使用另一个 **if** 或 **else if** 语句。 |\n| [switch 语句](https://www.runoob.com/cplusplus/cpp-switch.html) | 一个 **switch** 语句允许测试一个变量等于多个值时的情况。     |\n| [嵌套 switch 语句](https://www.runoob.com/cplusplus/cpp-nested-switch.html) | 您可以在一个 **switch** 语句内使用另一个 **switch** 语句。   |"},{"id":"2731cecf6cda","title":"？：判断","children":[],"parent":"4df665aaad98"}],"parent":"aee258d9e91c"},{"id":"191834f01c88","title":"函数","parent":"aee258d9e91c","children":[{"id":"61aa0f822d0b","title":"传值","parent":"191834f01c88","children":[]},{"id":"3a7ccc0106ba","title":"指针","parent":"191834f01c88","children":[]},{"id":"da75ff52ac06","title":"引用","children":[],"parent":"191834f01c88"}]},{"id":"ab7ccee2881f","title":"数组","parent":"aee258d9e91c","children":[],"note":"| 概念                                                         | 描述                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [多维数组](https://www.runoob.com/cplusplus/cpp-multi-dimensional-arrays.html) | C++ 支持多维数组。多维数组最简单的形式是二维数组。           |\n| [指向数组的指针](https://www.runoob.com/cplusplus/cpp-pointer-to-an-array.html) | 您可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。 |\n| [传递数组给函数](https://www.runoob.com/cplusplus/cpp-passing-arrays-to-functions.html) | 您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。 |\n| [从函数返回数组](https://www.runoob.com/cplusplus/cpp-return-arrays-from-function.html) | C++ 允许从函数返回数组。                                     |"},{"id":"647f3fca1edc","title":"数字","children":[],"parent":"aee258d9e91c"},{"id":"57e53ca6625e","title":"字符串","parent":"aee258d9e91c","children":[]},{"id":"0ef62a18ee3f","title":"指针","children":[{"id":"bb324c1b1cb6","title":"什么是指针","parent":"0ef62a18ee3f","children":[],"note":"**指针**是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：\n\n```\ntype *var-name;\n```\n\n在这里，**type** 是指针的基类型，它必须是一个有效的 C++ 数据类型，**var-name** 是指针变量的名称。用来声明指针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：\n\n```\nint    *ip;    /* 一个整型的指针 */\ndouble *dp;    /* 一个 double 型的指针 */\nfloat  *fp;    /* 一个浮点型的指针 */\nchar   *ch;    /* 一个字符型的指针 */\n```\n\n所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。"},{"id":"3885c938380d","title":"使用指针<br>","children":[],"parent":"0ef62a18ee3f","note":"**指针**是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：\n\n```\ntype *var-name;\n```\n\n在这里，**type** 是指针的基类型，它必须是一个有效的 C++ 数据类型，**var-name** 是指针变量的名称。用来声明指针的星号 * 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：\n\n```\nint    *ip;    /* 一个整型的指针 */\ndouble *dp;    /* 一个 double 型的指针 */\nfloat  *fp;    /* 一个浮点型的指针 */\nchar   *ch;    /* 一个字符型的指针 */\n```\n\n所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。\n\n\n\n\n\n使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 ***** 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：\n\n## 实例\n\n\\#include &lt;iostream&gt;  using namespace std;  int main () {   int  var = 20;   // 实际变量的声明   int  *ip;        // 指针变量的声明    ip = &var;       // 在指针变量中存储 var 的地址    cout &lt;&lt; &quot;Value of var variable: &quot;;   cout &lt;&lt; var &lt;&lt; endl;    // 输出在指针变量中存储的地址   cout &lt;&lt; &quot;Address stored in ip variable: &quot;;   cout &lt;&lt; ip &lt;&lt; endl;    // 访问指针中地址的值   cout &lt;&lt; &quot;Value of *ip variable: &quot;;   cout &lt;&lt; *ip &lt;&lt; endl;    return 0; }\n\n当上面的代码被编译和执行时，它会产生下列结果："},{"id":"6b3c931b965a","title":"指针详解","parent":"0ef62a18ee3f","children":[],"note":"在 C++ 中，有很多指针相关的概念，这些概念都很简单，但是都很重要。下面列出了 C++ 程序员必须清楚的一些与指针相关的重要概念：\n\n| 概念                                                         | 描述                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [C++ Null 指针](https://www.runoob.com/cplusplus/cpp-null-pointers.html) | C++ 支持空指针。NULL 指针是一个定义在标准库中的值为零的常量。 |\n| [C++ 指针的算术运算](https://www.runoob.com/cplusplus/cpp-pointer-arithmetic.html) | 可以对指针进行四种算术运算：++、--、+、-                     |\n| [C++ 指针 vs 数组](https://www.runoob.com/cplusplus/cpp-pointers-vs-arrays.html) | 指针和数组之间有着密切的关系。                               |\n| [C++ 指针数组](https://www.runoob.com/cplusplus/cpp-array-of-pointers.html) | 可以定义用来存储指针的数组。                                 |\n| [C++ 指向指针的指针](https://www.runoob.com/cplusplus/cpp-pointer-to-pointer.html) | C++ 允许指向指针的指针。                                     |\n| [C++ 传递指针给函数](https://www.runoob.com/cplusplus/cpp-passing-pointers-to-functions.html) | 通过引用或地址传递参数，使传递的参数在调用函数中被改变。     |\n| [C++ 从函数返回指针](https://www.runoob.com/cplusplus/cpp-return-pointer-from-functions.html) | C++ 允许函数返回指针到局部变量、静态变量和动态内存分配。     |"}],"parent":"aee258d9e91c"},{"id":"3d66c9691872","title":"引用","children":[{"id":"1a341bb31d5a","title":"注意和指针的区别","parent":"3d66c9691872","children":[]},{"id":"4ac384cb9f90","title":"引用通常用于函数参数列表和函数返回值<br>","parent":"3d66c9691872","children":[]}],"parent":"aee258d9e91c"},{"id":"bb19b3285441","title":"时间和日期","children":[],"parent":"aee258d9e91c"},{"id":"9c479cf547d7","title":"基本输入输出<br>","children":[{"id":"85ff55d5d229","title":"I/O库头文件<br>","parent":"9c479cf547d7","children":[],"note":"| 头文件     | 函数和描述                                                   |\n| :--------- | :----------------------------------------------------------- |\n| &lt;iostream&gt; | 该文件定义了 **cin、cout、cerr** 和 **clog** 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。 |\n| &lt;iomanip&gt;  | 该文件通过所谓的参数化的流操纵器（比如 **setw** 和 **setprecision**），来声明对执行标准化 I/O 有用的服务。 |\n| &lt;fstream&gt;  | 该文件为用户控制的文件处理声明服务。我们将在文件和流的相关章节讨论它的细节。 |"},{"id":"ccd38483384d","title":"标准输入流cin<br>","parent":"9c479cf547d7","children":[]},{"id":"07b6c5d8ce0d","title":"标准输出流cout","children":[],"parent":"9c479cf547d7"},{"id":"c143726f199d","title":"标准错误流cerr","children":[],"parent":"9c479cf547d7"},{"id":"351418d3fcde","title":"标准日志流clog<br>","children":[],"parent":"9c479cf547d7"}],"parent":"aee258d9e91c"},{"id":"50846596576f","title":"数据结构<br>","parent":"aee258d9e91c","children":[{"id":"931463d39ab9","title":"struct和typedef","children":[],"parent":"50846596576f"},{"id":"eb7be883dfd4","title":".和-&gt;","parent":"50846596576f","children":[]}]}],"parent":"root","collapsed":false},{"id":"8b8038300c85","title":"面向对象","parent":"root","children":[{"id":"0e07153706a1","title":"子主题<br>","parent":"8b8038300c85","children":[]}]},{"id":"909edd7b4ac9","title":"高级教程<br>","parent":"root","children":[]},{"id":"fe4898ffb1c6","title":"资源库","parent":"root","children":[]}]}},"meta":{"id":"5ece0b695653bb79c103d61b","member":"5eb4c1db5653bb6f2af5b7f9","exportTime":"2020-12-21 11:12:28","diagramInfo":{"category":"mind_free","title":"C++基础","created":"2020-05-27 14:40:41","creator":"5eb4c1db5653bb6f2af5b7f9","modified":"2020-06-05 14:50:56"},"type":"ProcessOn Schema File","version":"1.0"}}